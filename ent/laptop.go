// Code generated by entc, DO NOT EDIT.

package ent

import (
	"entsample2/ent/laptop"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// Laptop is the model entity for the Laptop schema.
type Laptop struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Brand holds the value of the "brand" field.
	Brand string `json:"brand,omitempty"`
	// Model holds the value of the "model" field.
	Model string `json:"model,omitempty"`
	// CPU holds the value of the "cpu" field.
	CPU string `json:"cpu,omitempty"`
	// RAM holds the value of the "ram" field.
	RAM string `json:"ram,omitempty"`
	// Harddisk holds the value of the "harddisk" field.
	Harddisk string `json:"harddisk,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Laptop) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case laptop.FieldID:
			values[i] = new(sql.NullInt64)
		case laptop.FieldBrand, laptop.FieldModel, laptop.FieldCPU, laptop.FieldRAM, laptop.FieldHarddisk:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Laptop", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Laptop fields.
func (l *Laptop) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case laptop.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			l.ID = int(value.Int64)
		case laptop.FieldBrand:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field brand", values[i])
			} else if value.Valid {
				l.Brand = value.String
			}
		case laptop.FieldModel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field model", values[i])
			} else if value.Valid {
				l.Model = value.String
			}
		case laptop.FieldCPU:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field cpu", values[i])
			} else if value.Valid {
				l.CPU = value.String
			}
		case laptop.FieldRAM:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ram", values[i])
			} else if value.Valid {
				l.RAM = value.String
			}
		case laptop.FieldHarddisk:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field harddisk", values[i])
			} else if value.Valid {
				l.Harddisk = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Laptop.
// Note that you need to call Laptop.Unwrap() before calling this method if this Laptop
// was returned from a transaction, and the transaction was committed or rolled back.
func (l *Laptop) Update() *LaptopUpdateOne {
	return (&LaptopClient{config: l.config}).UpdateOne(l)
}

// Unwrap unwraps the Laptop entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (l *Laptop) Unwrap() *Laptop {
	tx, ok := l.config.driver.(*txDriver)
	if !ok {
		panic("ent: Laptop is not a transactional entity")
	}
	l.config.driver = tx.drv
	return l
}

// String implements the fmt.Stringer.
func (l *Laptop) String() string {
	var builder strings.Builder
	builder.WriteString("Laptop(")
	builder.WriteString(fmt.Sprintf("id=%v", l.ID))
	builder.WriteString(", brand=")
	builder.WriteString(l.Brand)
	builder.WriteString(", model=")
	builder.WriteString(l.Model)
	builder.WriteString(", cpu=")
	builder.WriteString(l.CPU)
	builder.WriteString(", ram=")
	builder.WriteString(l.RAM)
	builder.WriteString(", harddisk=")
	builder.WriteString(l.Harddisk)
	builder.WriteByte(')')
	return builder.String()
}

// Laptops is a parsable slice of Laptop.
type Laptops []*Laptop

func (l Laptops) config(cfg config) {
	for _i := range l {
		l[_i].config = cfg
	}
}

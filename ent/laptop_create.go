// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"entsample2/ent/laptop"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// LaptopCreate is the builder for creating a Laptop entity.
type LaptopCreate struct {
	config
	mutation *LaptopMutation
	hooks    []Hook
}

// SetBrand sets the "brand" field.
func (lc *LaptopCreate) SetBrand(s string) *LaptopCreate {
	lc.mutation.SetBrand(s)
	return lc
}

// SetModel sets the "model" field.
func (lc *LaptopCreate) SetModel(s string) *LaptopCreate {
	lc.mutation.SetModel(s)
	return lc
}

// SetCPU sets the "cpu" field.
func (lc *LaptopCreate) SetCPU(s string) *LaptopCreate {
	lc.mutation.SetCPU(s)
	return lc
}

// SetRAM sets the "ram" field.
func (lc *LaptopCreate) SetRAM(s string) *LaptopCreate {
	lc.mutation.SetRAM(s)
	return lc
}

// SetHarddisk sets the "harddisk" field.
func (lc *LaptopCreate) SetHarddisk(s string) *LaptopCreate {
	lc.mutation.SetHarddisk(s)
	return lc
}

// Mutation returns the LaptopMutation object of the builder.
func (lc *LaptopCreate) Mutation() *LaptopMutation {
	return lc.mutation
}

// Save creates the Laptop in the database.
func (lc *LaptopCreate) Save(ctx context.Context) (*Laptop, error) {
	var (
		err  error
		node *Laptop
	)
	if len(lc.hooks) == 0 {
		if err = lc.check(); err != nil {
			return nil, err
		}
		node, err = lc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*LaptopMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = lc.check(); err != nil {
				return nil, err
			}
			lc.mutation = mutation
			if node, err = lc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(lc.hooks) - 1; i >= 0; i-- {
			if lc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = lc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, lc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (lc *LaptopCreate) SaveX(ctx context.Context) *Laptop {
	v, err := lc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lc *LaptopCreate) Exec(ctx context.Context) error {
	_, err := lc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lc *LaptopCreate) ExecX(ctx context.Context) {
	if err := lc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lc *LaptopCreate) check() error {
	if _, ok := lc.mutation.Brand(); !ok {
		return &ValidationError{Name: "brand", err: errors.New(`ent: missing required field "brand"`)}
	}
	if v, ok := lc.mutation.Brand(); ok {
		if err := laptop.BrandValidator(v); err != nil {
			return &ValidationError{Name: "brand", err: fmt.Errorf(`ent: validator failed for field "brand": %w`, err)}
		}
	}
	if _, ok := lc.mutation.Model(); !ok {
		return &ValidationError{Name: "model", err: errors.New(`ent: missing required field "model"`)}
	}
	if v, ok := lc.mutation.Model(); ok {
		if err := laptop.ModelValidator(v); err != nil {
			return &ValidationError{Name: "model", err: fmt.Errorf(`ent: validator failed for field "model": %w`, err)}
		}
	}
	if _, ok := lc.mutation.CPU(); !ok {
		return &ValidationError{Name: "cpu", err: errors.New(`ent: missing required field "cpu"`)}
	}
	if v, ok := lc.mutation.CPU(); ok {
		if err := laptop.CPUValidator(v); err != nil {
			return &ValidationError{Name: "cpu", err: fmt.Errorf(`ent: validator failed for field "cpu": %w`, err)}
		}
	}
	if _, ok := lc.mutation.RAM(); !ok {
		return &ValidationError{Name: "ram", err: errors.New(`ent: missing required field "ram"`)}
	}
	if v, ok := lc.mutation.RAM(); ok {
		if err := laptop.RAMValidator(v); err != nil {
			return &ValidationError{Name: "ram", err: fmt.Errorf(`ent: validator failed for field "ram": %w`, err)}
		}
	}
	if _, ok := lc.mutation.Harddisk(); !ok {
		return &ValidationError{Name: "harddisk", err: errors.New(`ent: missing required field "harddisk"`)}
	}
	return nil
}

func (lc *LaptopCreate) sqlSave(ctx context.Context) (*Laptop, error) {
	_node, _spec := lc.createSpec()
	if err := sqlgraph.CreateNode(ctx, lc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (lc *LaptopCreate) createSpec() (*Laptop, *sqlgraph.CreateSpec) {
	var (
		_node = &Laptop{config: lc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: laptop.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: laptop.FieldID,
			},
		}
	)
	if value, ok := lc.mutation.Brand(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: laptop.FieldBrand,
		})
		_node.Brand = value
	}
	if value, ok := lc.mutation.Model(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: laptop.FieldModel,
		})
		_node.Model = value
	}
	if value, ok := lc.mutation.CPU(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: laptop.FieldCPU,
		})
		_node.CPU = value
	}
	if value, ok := lc.mutation.RAM(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: laptop.FieldRAM,
		})
		_node.RAM = value
	}
	if value, ok := lc.mutation.Harddisk(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: laptop.FieldHarddisk,
		})
		_node.Harddisk = value
	}
	return _node, _spec
}

// LaptopCreateBulk is the builder for creating many Laptop entities in bulk.
type LaptopCreateBulk struct {
	config
	builders []*LaptopCreate
}

// Save creates the Laptop entities in the database.
func (lcb *LaptopCreateBulk) Save(ctx context.Context) ([]*Laptop, error) {
	specs := make([]*sqlgraph.CreateSpec, len(lcb.builders))
	nodes := make([]*Laptop, len(lcb.builders))
	mutators := make([]Mutator, len(lcb.builders))
	for i := range lcb.builders {
		func(i int, root context.Context) {
			builder := lcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LaptopMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, lcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, lcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, lcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (lcb *LaptopCreateBulk) SaveX(ctx context.Context) []*Laptop {
	v, err := lcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lcb *LaptopCreateBulk) Exec(ctx context.Context) error {
	_, err := lcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lcb *LaptopCreateBulk) ExecX(ctx context.Context) {
	if err := lcb.Exec(ctx); err != nil {
		panic(err)
	}
}

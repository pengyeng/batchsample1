// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"entsample2/ent/laptop"
	"entsample2/ent/predicate"
	"fmt"
	"sync"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeLaptop = "Laptop"
)

// LaptopMutation represents an operation that mutates the Laptop nodes in the graph.
type LaptopMutation struct {
	config
	op            Op
	typ           string
	id            *int
	brand         *string
	model         *string
	cpu           *string
	ram           *string
	harddisk      *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Laptop, error)
	predicates    []predicate.Laptop
}

var _ ent.Mutation = (*LaptopMutation)(nil)

// laptopOption allows management of the mutation configuration using functional options.
type laptopOption func(*LaptopMutation)

// newLaptopMutation creates new mutation for the Laptop entity.
func newLaptopMutation(c config, op Op, opts ...laptopOption) *LaptopMutation {
	m := &LaptopMutation{
		config:        c,
		op:            op,
		typ:           TypeLaptop,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withLaptopID sets the ID field of the mutation.
func withLaptopID(id int) laptopOption {
	return func(m *LaptopMutation) {
		var (
			err   error
			once  sync.Once
			value *Laptop
		)
		m.oldValue = func(ctx context.Context) (*Laptop, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Laptop.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withLaptop sets the old Laptop of the mutation.
func withLaptop(node *Laptop) laptopOption {
	return func(m *LaptopMutation) {
		m.oldValue = func(context.Context) (*Laptop, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m LaptopMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m LaptopMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *LaptopMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetBrand sets the "brand" field.
func (m *LaptopMutation) SetBrand(s string) {
	m.brand = &s
}

// Brand returns the value of the "brand" field in the mutation.
func (m *LaptopMutation) Brand() (r string, exists bool) {
	v := m.brand
	if v == nil {
		return
	}
	return *v, true
}

// OldBrand returns the old "brand" field's value of the Laptop entity.
// If the Laptop object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LaptopMutation) OldBrand(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldBrand is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldBrand requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBrand: %w", err)
	}
	return oldValue.Brand, nil
}

// ResetBrand resets all changes to the "brand" field.
func (m *LaptopMutation) ResetBrand() {
	m.brand = nil
}

// SetModel sets the "model" field.
func (m *LaptopMutation) SetModel(s string) {
	m.model = &s
}

// Model returns the value of the "model" field in the mutation.
func (m *LaptopMutation) Model() (r string, exists bool) {
	v := m.model
	if v == nil {
		return
	}
	return *v, true
}

// OldModel returns the old "model" field's value of the Laptop entity.
// If the Laptop object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LaptopMutation) OldModel(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldModel is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldModel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldModel: %w", err)
	}
	return oldValue.Model, nil
}

// ResetModel resets all changes to the "model" field.
func (m *LaptopMutation) ResetModel() {
	m.model = nil
}

// SetCPU sets the "cpu" field.
func (m *LaptopMutation) SetCPU(s string) {
	m.cpu = &s
}

// CPU returns the value of the "cpu" field in the mutation.
func (m *LaptopMutation) CPU() (r string, exists bool) {
	v := m.cpu
	if v == nil {
		return
	}
	return *v, true
}

// OldCPU returns the old "cpu" field's value of the Laptop entity.
// If the Laptop object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LaptopMutation) OldCPU(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCPU is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCPU requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCPU: %w", err)
	}
	return oldValue.CPU, nil
}

// ResetCPU resets all changes to the "cpu" field.
func (m *LaptopMutation) ResetCPU() {
	m.cpu = nil
}

// SetRAM sets the "ram" field.
func (m *LaptopMutation) SetRAM(s string) {
	m.ram = &s
}

// RAM returns the value of the "ram" field in the mutation.
func (m *LaptopMutation) RAM() (r string, exists bool) {
	v := m.ram
	if v == nil {
		return
	}
	return *v, true
}

// OldRAM returns the old "ram" field's value of the Laptop entity.
// If the Laptop object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LaptopMutation) OldRAM(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldRAM is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldRAM requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRAM: %w", err)
	}
	return oldValue.RAM, nil
}

// ResetRAM resets all changes to the "ram" field.
func (m *LaptopMutation) ResetRAM() {
	m.ram = nil
}

// SetHarddisk sets the "harddisk" field.
func (m *LaptopMutation) SetHarddisk(s string) {
	m.harddisk = &s
}

// Harddisk returns the value of the "harddisk" field in the mutation.
func (m *LaptopMutation) Harddisk() (r string, exists bool) {
	v := m.harddisk
	if v == nil {
		return
	}
	return *v, true
}

// OldHarddisk returns the old "harddisk" field's value of the Laptop entity.
// If the Laptop object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LaptopMutation) OldHarddisk(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldHarddisk is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldHarddisk requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHarddisk: %w", err)
	}
	return oldValue.Harddisk, nil
}

// ResetHarddisk resets all changes to the "harddisk" field.
func (m *LaptopMutation) ResetHarddisk() {
	m.harddisk = nil
}

// Where appends a list predicates to the LaptopMutation builder.
func (m *LaptopMutation) Where(ps ...predicate.Laptop) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *LaptopMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Laptop).
func (m *LaptopMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *LaptopMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.brand != nil {
		fields = append(fields, laptop.FieldBrand)
	}
	if m.model != nil {
		fields = append(fields, laptop.FieldModel)
	}
	if m.cpu != nil {
		fields = append(fields, laptop.FieldCPU)
	}
	if m.ram != nil {
		fields = append(fields, laptop.FieldRAM)
	}
	if m.harddisk != nil {
		fields = append(fields, laptop.FieldHarddisk)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *LaptopMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case laptop.FieldBrand:
		return m.Brand()
	case laptop.FieldModel:
		return m.Model()
	case laptop.FieldCPU:
		return m.CPU()
	case laptop.FieldRAM:
		return m.RAM()
	case laptop.FieldHarddisk:
		return m.Harddisk()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *LaptopMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case laptop.FieldBrand:
		return m.OldBrand(ctx)
	case laptop.FieldModel:
		return m.OldModel(ctx)
	case laptop.FieldCPU:
		return m.OldCPU(ctx)
	case laptop.FieldRAM:
		return m.OldRAM(ctx)
	case laptop.FieldHarddisk:
		return m.OldHarddisk(ctx)
	}
	return nil, fmt.Errorf("unknown Laptop field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LaptopMutation) SetField(name string, value ent.Value) error {
	switch name {
	case laptop.FieldBrand:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBrand(v)
		return nil
	case laptop.FieldModel:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetModel(v)
		return nil
	case laptop.FieldCPU:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCPU(v)
		return nil
	case laptop.FieldRAM:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRAM(v)
		return nil
	case laptop.FieldHarddisk:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHarddisk(v)
		return nil
	}
	return fmt.Errorf("unknown Laptop field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *LaptopMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *LaptopMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LaptopMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Laptop numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *LaptopMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *LaptopMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *LaptopMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Laptop nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *LaptopMutation) ResetField(name string) error {
	switch name {
	case laptop.FieldBrand:
		m.ResetBrand()
		return nil
	case laptop.FieldModel:
		m.ResetModel()
		return nil
	case laptop.FieldCPU:
		m.ResetCPU()
		return nil
	case laptop.FieldRAM:
		m.ResetRAM()
		return nil
	case laptop.FieldHarddisk:
		m.ResetHarddisk()
		return nil
	}
	return fmt.Errorf("unknown Laptop field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *LaptopMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *LaptopMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *LaptopMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *LaptopMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *LaptopMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *LaptopMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *LaptopMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Laptop unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *LaptopMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Laptop edge %s", name)
}

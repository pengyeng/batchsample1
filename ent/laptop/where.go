// Code generated by entc, DO NOT EDIT.

package laptop

import (
	"entsample2/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Brand applies equality check predicate on the "brand" field. It's identical to BrandEQ.
func Brand(v string) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBrand), v))
	})
}

// Model applies equality check predicate on the "model" field. It's identical to ModelEQ.
func Model(v string) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldModel), v))
	})
}

// CPU applies equality check predicate on the "cpu" field. It's identical to CPUEQ.
func CPU(v string) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCPU), v))
	})
}

// RAM applies equality check predicate on the "ram" field. It's identical to RAMEQ.
func RAM(v string) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRAM), v))
	})
}

// Harddisk applies equality check predicate on the "harddisk" field. It's identical to HarddiskEQ.
func Harddisk(v string) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHarddisk), v))
	})
}

// BrandEQ applies the EQ predicate on the "brand" field.
func BrandEQ(v string) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBrand), v))
	})
}

// BrandNEQ applies the NEQ predicate on the "brand" field.
func BrandNEQ(v string) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBrand), v))
	})
}

// BrandIn applies the In predicate on the "brand" field.
func BrandIn(vs ...string) predicate.Laptop {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Laptop(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldBrand), v...))
	})
}

// BrandNotIn applies the NotIn predicate on the "brand" field.
func BrandNotIn(vs ...string) predicate.Laptop {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Laptop(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldBrand), v...))
	})
}

// BrandGT applies the GT predicate on the "brand" field.
func BrandGT(v string) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBrand), v))
	})
}

// BrandGTE applies the GTE predicate on the "brand" field.
func BrandGTE(v string) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBrand), v))
	})
}

// BrandLT applies the LT predicate on the "brand" field.
func BrandLT(v string) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBrand), v))
	})
}

// BrandLTE applies the LTE predicate on the "brand" field.
func BrandLTE(v string) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBrand), v))
	})
}

// BrandContains applies the Contains predicate on the "brand" field.
func BrandContains(v string) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldBrand), v))
	})
}

// BrandHasPrefix applies the HasPrefix predicate on the "brand" field.
func BrandHasPrefix(v string) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldBrand), v))
	})
}

// BrandHasSuffix applies the HasSuffix predicate on the "brand" field.
func BrandHasSuffix(v string) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldBrand), v))
	})
}

// BrandEqualFold applies the EqualFold predicate on the "brand" field.
func BrandEqualFold(v string) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldBrand), v))
	})
}

// BrandContainsFold applies the ContainsFold predicate on the "brand" field.
func BrandContainsFold(v string) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldBrand), v))
	})
}

// ModelEQ applies the EQ predicate on the "model" field.
func ModelEQ(v string) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldModel), v))
	})
}

// ModelNEQ applies the NEQ predicate on the "model" field.
func ModelNEQ(v string) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldModel), v))
	})
}

// ModelIn applies the In predicate on the "model" field.
func ModelIn(vs ...string) predicate.Laptop {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Laptop(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldModel), v...))
	})
}

// ModelNotIn applies the NotIn predicate on the "model" field.
func ModelNotIn(vs ...string) predicate.Laptop {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Laptop(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldModel), v...))
	})
}

// ModelGT applies the GT predicate on the "model" field.
func ModelGT(v string) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldModel), v))
	})
}

// ModelGTE applies the GTE predicate on the "model" field.
func ModelGTE(v string) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldModel), v))
	})
}

// ModelLT applies the LT predicate on the "model" field.
func ModelLT(v string) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldModel), v))
	})
}

// ModelLTE applies the LTE predicate on the "model" field.
func ModelLTE(v string) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldModel), v))
	})
}

// ModelContains applies the Contains predicate on the "model" field.
func ModelContains(v string) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldModel), v))
	})
}

// ModelHasPrefix applies the HasPrefix predicate on the "model" field.
func ModelHasPrefix(v string) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldModel), v))
	})
}

// ModelHasSuffix applies the HasSuffix predicate on the "model" field.
func ModelHasSuffix(v string) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldModel), v))
	})
}

// ModelEqualFold applies the EqualFold predicate on the "model" field.
func ModelEqualFold(v string) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldModel), v))
	})
}

// ModelContainsFold applies the ContainsFold predicate on the "model" field.
func ModelContainsFold(v string) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldModel), v))
	})
}

// CPUEQ applies the EQ predicate on the "cpu" field.
func CPUEQ(v string) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCPU), v))
	})
}

// CPUNEQ applies the NEQ predicate on the "cpu" field.
func CPUNEQ(v string) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCPU), v))
	})
}

// CPUIn applies the In predicate on the "cpu" field.
func CPUIn(vs ...string) predicate.Laptop {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Laptop(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCPU), v...))
	})
}

// CPUNotIn applies the NotIn predicate on the "cpu" field.
func CPUNotIn(vs ...string) predicate.Laptop {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Laptop(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCPU), v...))
	})
}

// CPUGT applies the GT predicate on the "cpu" field.
func CPUGT(v string) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCPU), v))
	})
}

// CPUGTE applies the GTE predicate on the "cpu" field.
func CPUGTE(v string) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCPU), v))
	})
}

// CPULT applies the LT predicate on the "cpu" field.
func CPULT(v string) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCPU), v))
	})
}

// CPULTE applies the LTE predicate on the "cpu" field.
func CPULTE(v string) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCPU), v))
	})
}

// CPUContains applies the Contains predicate on the "cpu" field.
func CPUContains(v string) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCPU), v))
	})
}

// CPUHasPrefix applies the HasPrefix predicate on the "cpu" field.
func CPUHasPrefix(v string) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCPU), v))
	})
}

// CPUHasSuffix applies the HasSuffix predicate on the "cpu" field.
func CPUHasSuffix(v string) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCPU), v))
	})
}

// CPUEqualFold applies the EqualFold predicate on the "cpu" field.
func CPUEqualFold(v string) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCPU), v))
	})
}

// CPUContainsFold applies the ContainsFold predicate on the "cpu" field.
func CPUContainsFold(v string) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCPU), v))
	})
}

// RAMEQ applies the EQ predicate on the "ram" field.
func RAMEQ(v string) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRAM), v))
	})
}

// RAMNEQ applies the NEQ predicate on the "ram" field.
func RAMNEQ(v string) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRAM), v))
	})
}

// RAMIn applies the In predicate on the "ram" field.
func RAMIn(vs ...string) predicate.Laptop {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Laptop(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRAM), v...))
	})
}

// RAMNotIn applies the NotIn predicate on the "ram" field.
func RAMNotIn(vs ...string) predicate.Laptop {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Laptop(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRAM), v...))
	})
}

// RAMGT applies the GT predicate on the "ram" field.
func RAMGT(v string) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRAM), v))
	})
}

// RAMGTE applies the GTE predicate on the "ram" field.
func RAMGTE(v string) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRAM), v))
	})
}

// RAMLT applies the LT predicate on the "ram" field.
func RAMLT(v string) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRAM), v))
	})
}

// RAMLTE applies the LTE predicate on the "ram" field.
func RAMLTE(v string) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRAM), v))
	})
}

// RAMContains applies the Contains predicate on the "ram" field.
func RAMContains(v string) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRAM), v))
	})
}

// RAMHasPrefix applies the HasPrefix predicate on the "ram" field.
func RAMHasPrefix(v string) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRAM), v))
	})
}

// RAMHasSuffix applies the HasSuffix predicate on the "ram" field.
func RAMHasSuffix(v string) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRAM), v))
	})
}

// RAMEqualFold applies the EqualFold predicate on the "ram" field.
func RAMEqualFold(v string) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRAM), v))
	})
}

// RAMContainsFold applies the ContainsFold predicate on the "ram" field.
func RAMContainsFold(v string) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRAM), v))
	})
}

// HarddiskEQ applies the EQ predicate on the "harddisk" field.
func HarddiskEQ(v string) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHarddisk), v))
	})
}

// HarddiskNEQ applies the NEQ predicate on the "harddisk" field.
func HarddiskNEQ(v string) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHarddisk), v))
	})
}

// HarddiskIn applies the In predicate on the "harddisk" field.
func HarddiskIn(vs ...string) predicate.Laptop {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Laptop(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldHarddisk), v...))
	})
}

// HarddiskNotIn applies the NotIn predicate on the "harddisk" field.
func HarddiskNotIn(vs ...string) predicate.Laptop {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Laptop(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldHarddisk), v...))
	})
}

// HarddiskGT applies the GT predicate on the "harddisk" field.
func HarddiskGT(v string) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldHarddisk), v))
	})
}

// HarddiskGTE applies the GTE predicate on the "harddisk" field.
func HarddiskGTE(v string) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldHarddisk), v))
	})
}

// HarddiskLT applies the LT predicate on the "harddisk" field.
func HarddiskLT(v string) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldHarddisk), v))
	})
}

// HarddiskLTE applies the LTE predicate on the "harddisk" field.
func HarddiskLTE(v string) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldHarddisk), v))
	})
}

// HarddiskContains applies the Contains predicate on the "harddisk" field.
func HarddiskContains(v string) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldHarddisk), v))
	})
}

// HarddiskHasPrefix applies the HasPrefix predicate on the "harddisk" field.
func HarddiskHasPrefix(v string) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldHarddisk), v))
	})
}

// HarddiskHasSuffix applies the HasSuffix predicate on the "harddisk" field.
func HarddiskHasSuffix(v string) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldHarddisk), v))
	})
}

// HarddiskEqualFold applies the EqualFold predicate on the "harddisk" field.
func HarddiskEqualFold(v string) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldHarddisk), v))
	})
}

// HarddiskContainsFold applies the ContainsFold predicate on the "harddisk" field.
func HarddiskContainsFold(v string) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldHarddisk), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Laptop) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Laptop) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Laptop) predicate.Laptop {
	return predicate.Laptop(func(s *sql.Selector) {
		p(s.Not())
	})
}
